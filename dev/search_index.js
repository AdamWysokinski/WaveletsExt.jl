var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [WaveletsExt]","category":"page"},{"location":"bestbasis/#Best-Basis-Examples","page":"Best Basis Examples","title":"Best Basis Examples","text":"","category":"section"},{"location":"bestbasis/#Regular-Best-Basis","page":"Best Basis Examples","title":"Regular Best Basis","text":"","category":"section"},{"location":"bestbasis/","page":"Best Basis Examples","title":"Best Basis Examples","text":"using Wavelets, WaveletsExt\n\n# define function and wavelet\nx = testfunction(256, \"HeaviSine\")\nX = generatesignals(x, 10, 2, true, 0.5)\nwt = wavelet(WT.db4)\n\n# decomposition\ny = cat([wpd(X[:,i], wt) for i in axes(X,2)]..., dims=3)\n\n# best basis tree\nbt = bestbasistree(y, BB())","category":"page"},{"location":"bestbasis/#Joint-Best-Basis-(JBB)","page":"Best Basis Examples","title":"Joint Best Basis (JBB)","text":"","category":"section"},{"location":"bestbasis/","page":"Best Basis Examples","title":"Best Basis Examples","text":"using Wavelets, WaveletsExt\n\n# define function and wavelet\nx = testfunction(256, \"HeaviSine\")\nX = generatesignals(x, 10, 2, true, 0.5)\nwt = wavelet(WT.db4)\n\n# decomposition\ny = cat([wpd(X[:,i], wt) for i in axes(X,2)]..., dims=3)\n\n# best basis tree\nbt = bestbasistree(y, JBB())","category":"page"},{"location":"bestbasis/#Least-Statistically-Dependent-Basis-(LSDB)","page":"Best Basis Examples","title":"Least Statistically Dependent Basis (LSDB)","text":"","category":"section"},{"location":"bestbasis/","page":"Best Basis Examples","title":"Best Basis Examples","text":"using Wavelets, WaveletsExt\n\n# define function and wavelet\nx = testfunction(256, \"HeaviSine\")\nX = generatesignals(x, 10, 2, true, 0.5)\nwt = wavelet(WT.db4)\n\n# decomposition\ny = cat([wpd(X[:,i], wt) for i in axes(X,2)]..., dims=3)\n\n# best basis tree\nbt = bestbasistree(y, LSDB())","category":"page"},{"location":"transforms/#Wavelet-Transforms","page":"Wavelet Transforms","title":"Wavelet Transforms","text":"","category":"section"},{"location":"transforms/#Wavelet-Packet-Decomposition","page":"Wavelet Transforms","title":"Wavelet Packet Decomposition","text":"","category":"section"},{"location":"transforms/#Example","page":"Wavelet Transforms","title":"Example","text":"","category":"section"},{"location":"transforms/","page":"Wavelet Transforms","title":"Wavelet Transforms","text":"using Wavelets, WaveletsExt\n\n# define function and wavelet\nx = testfunction(256, \"HeaviSine\")\nwt = wavelet(WT.db4)\n\n# decomposition\ny = wpd(x, wt)","category":"page"},{"location":"transforms/#Stationary-Discrete-Wavelet-Transform","page":"Wavelet Transforms","title":"Stationary Discrete Wavelet Transform","text":"","category":"section"},{"location":"transforms/#Example-2","page":"Wavelet Transforms","title":"Example","text":"","category":"section"},{"location":"transforms/","page":"Wavelet Transforms","title":"Wavelet Transforms","text":"using Wavelets, WaveletsExt\n\n# define function and wavelet\nx = testfunction(256, \"HeaviSine\")\nwt = wavelet(WT.db4)\n\n# transform\ny = sdwt(x, wt)","category":"page"},{"location":"transforms/#Stationary-Wavelet-Packet-Decomposition","page":"Wavelet Transforms","title":"Stationary Wavelet Packet Decomposition","text":"","category":"section"},{"location":"transforms/#Example-3","page":"Wavelet Transforms","title":"Example","text":"","category":"section"},{"location":"transforms/","page":"Wavelet Transforms","title":"Wavelet Transforms","text":"using Wavelets, WaveletsExt\n\n# define function and wavelet\nx = testfunction(256, \"HeaviSine\")\nwt = wavelet(WT.db4)\n\n# decomposition\ny = swpd(x, wt)","category":"page"},{"location":"transforms/#Shift-Invariant-Wavelet-Packet-Decomposition","page":"Wavelet Transforms","title":"Shift-Invariant Wavelet Packet Decomposition","text":"","category":"section"},{"location":"transforms/#Example-4","page":"Wavelet Transforms","title":"Example","text":"","category":"section"},{"location":"transforms/","page":"Wavelet Transforms","title":"Wavelet Transforms","text":"using Wavelets, WaveletsExt\n\n# define function and wavelet\nx = testfunction(256, \"HeaviSine\")\nwt = wavelet(WT.db4)\n\n# decomposition\ny = siwpd(x, wt, maxtransformlevels(x),)","category":"page"},{"location":"denoising/#Denoising-Examples","page":"Denoising Examples","title":"Denoising Examples","text":"","category":"section"},{"location":"denoising/#Denoising-a-single-signal","page":"Denoising Examples","title":"Denoising a single signal","text":"","category":"section"},{"location":"denoising/","page":"Denoising Examples","title":"Denoising Examples","text":"using Wavelets, WaveletsExt, Random\n\n# define function and wavelet\nx = testfunction(256, \"HeaviSine\") + randn(256, 0.5)\nwt = wavelet(WT.db4)\n\n# best basis tree\nbt = bestbasistree(wpd(x, wt), BB())\ny = bestbasiscoef(x, wt, bt)\n\n# denoise\nx̂ = denoise(y, :wpt, wt, tree=bt)","category":"page"},{"location":"denoising/#Denoising-a-group-of-signals","page":"Denoising Examples","title":"Denoising a group of signals","text":"","category":"section"},{"location":"denoising/","page":"Denoising Examples","title":"Denoising Examples","text":"using Wavelets, WaveletsExt, Random\n\n# define function and wavelet\nx = testfunction(256, \"HeaviSine\")\nX = generatesignals(x, 10, 2, true, 0.5)\nwt = wavelet(WT.db4)\n\n# decomposition\ncoef = cat([wpd(X[:,i], wt) for i in axes(X,2)]..., dims=3)\n\n# best basis tree\nbt = bestbasistree(coef, JBB())\nY = bestbasiscoef(coef, bt)\n\n# denoise\nX̂ = denoiseall(Y, :wpt, wt, tree=bt)","category":"page"},{"location":"#WaveletsExt.jl","page":"WaveletsExt.jl","title":"WaveletsExt.jl","text":"","category":"section"},{"location":"","page":"WaveletsExt.jl","title":"WaveletsExt.jl","text":"This package is a Julia extension package to Wavelets.jl (WaveletsExt is short for Wavelets Extension). It contains additional functionalities that complement Wavelets.jl, which include multiple best basis algorithms, denoising methods, Local Discriminant Basis (LDB), Stationary Wavelet Transform, and the Shift Invariant Wavelet Decomposition.","category":"page"},{"location":"#Authors","page":"WaveletsExt.jl","title":"Authors","text":"","category":"section"},{"location":"","page":"WaveletsExt.jl","title":"WaveletsExt.jl","text":"This package is written and maintained by Zeng Fung Liew and Shozen Dan under the supervision of Professor Naoki Saito at the University of California, Davis.","category":"page"},{"location":"#Installation","page":"WaveletsExt.jl","title":"Installation","text":"","category":"section"},{"location":"","page":"WaveletsExt.jl","title":"WaveletsExt.jl","text":"The package is part of the official Julia Registry. It can be install via the Julia REPL.","category":"page"},{"location":"","page":"WaveletsExt.jl","title":"WaveletsExt.jl","text":"(@1.x) pkg> add WaveletsExt","category":"page"},{"location":"","page":"WaveletsExt.jl","title":"WaveletsExt.jl","text":"or","category":"page"},{"location":"","page":"WaveletsExt.jl","title":"WaveletsExt.jl","text":"julia> using Pkg; Pkg.add(\"WaveletsExt\")","category":"page"},{"location":"#Usage","page":"WaveletsExt.jl","title":"Usage","text":"","category":"section"},{"location":"","page":"WaveletsExt.jl","title":"WaveletsExt.jl","text":"Load the WaveletsExt module along with Wavelets.jl.","category":"page"},{"location":"","page":"WaveletsExt.jl","title":"WaveletsExt.jl","text":"using Wavelets, WaveletsExt","category":"page"},{"location":"#Wavelet-Packet-Decomposition","page":"WaveletsExt.jl","title":"Wavelet Packet Decomposition","text":"","category":"section"},{"location":"","page":"WaveletsExt.jl","title":"WaveletsExt.jl","text":"In contrast to Wavelets.jl's wpt function, wpd outputs expansion coefficients of all levels of a given signal. Each column represents a level in the decomposition tree.","category":"page"},{"location":"","page":"WaveletsExt.jl","title":"WaveletsExt.jl","text":"y = wpd(x, wavelet(WT.db4))","category":"page"},{"location":"#Stationary-Wavelet-Transform","page":"WaveletsExt.jl","title":"Stationary Wavelet Transform","text":"","category":"section"},{"location":"","page":"WaveletsExt.jl","title":"WaveletsExt.jl","text":"The redundant and non-orthogonal transform by Nason-Silverman can be implemented using either sdwt (for stationary discrete wavelet transform) or iswpd (for stationary wavelet packet decomposition). Similarly, the reconstruction of signals can be computed using isdwt and iswpt.","category":"page"},{"location":"","page":"WaveletsExt.jl","title":"WaveletsExt.jl","text":"# stationary discrete wavelet transform\ny = sdwt(x, wavelet(WT.db4))\nz = isdwt(y, wavelet(WT.db4))\n\n# stationary wavelet packet decomposition\ny = swpd(x, wavelet(WT.db4))\nz = iswpt(y, wavelet(WT.db4))","category":"page"},{"location":"#Best-Basis","page":"WaveletsExt.jl","title":"Best Basis","text":"","category":"section"},{"location":"","page":"WaveletsExt.jl","title":"WaveletsExt.jl","text":"In addition to the best basis algorithm by M.V. Wickerhauser implemented in Wavelets.jl, WaveletsExt.jl contains the implementation of the Joint Best Basis (JBB) by Wickerhauser an the Least Statistically-Dependent Basis (LSDB) by Saito.","category":"page"},{"location":"","page":"WaveletsExt.jl","title":"WaveletsExt.jl","text":"y = cat([wpd(x[:,i], wt) for i in N]..., dims=3)    # x has size (2^L, N)\n\n# individual best basis trees\nbbt = bestbasistree(y, BB())\n# joint best basis\nbbt = bestbasistree(y, JBB())\n# least statistically dependent basis\nbbt = bestbasistree(y, LSDB())","category":"page"},{"location":"","page":"WaveletsExt.jl","title":"WaveletsExt.jl","text":"Given a BitVector representing a best basis tree, one can obtain the corresponding expansion coefficients using bestbasiscoef.","category":"page"},{"location":"","page":"WaveletsExt.jl","title":"WaveletsExt.jl","text":"coef = bestbasiscoef(y, bbt)","category":"page"},{"location":"#Local-Discriminant-Basis","page":"WaveletsExt.jl","title":"Local Discriminant Basis","text":"","category":"section"},{"location":"","page":"WaveletsExt.jl","title":"WaveletsExt.jl","text":"Local Discriminant Basis (LDB) is a feature extraction method developed by Naoki Saito.","category":"page"},{"location":"","page":"WaveletsExt.jl","title":"WaveletsExt.jl","text":"coef, y, ldb_tree, power, order = ldb(X, y, wavelet(WT.coif3))","category":"page"}]
}
